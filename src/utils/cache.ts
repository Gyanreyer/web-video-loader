import findCacheDir from "find-cache-dir";
import { promises as fsPromises } from "fs";
import path from "path";
import { promisify } from "util";
import zlib from "zlib";

// Use `node_modules/.cache/web-video-loader` as our cache directory, or if that falls through, use the OS temp directory
function getCacheDirectory(create: boolean = false) {
  return findCacheDir({
    name: "web-video-loader",
    create,
  });
}

const gzip = promisify(zlib.gzip);
const gunzip = promisify(zlib.gunzip);

/**
 * Attempts to retrieve a video file matching a given file name from the cache
 */
export async function getCachedFileData(fileName: string) {
  const cacheDirectory = getCacheDirectory();
  if (!cacheDirectory) return null;

  // Cached video files will be gzipped in an effort to save additional space, so add an additional `.gz` extension to denote that
  const cachedFilePath = path.resolve(cacheDirectory, `${fileName}.gz`);

  try {
    const cachedCompressedFileData = await fsPromises.readFile(cachedFilePath);

    return await gunzip(cachedCompressedFileData);
  } catch (err: any) {
    // If the error code is "ENOENT" that means the file doesn't exist in the cache, so let's proceed and return null.
    // Otherwise, the error is becauase of something unexpected so re-throw it to make sure it doesn't get swallowed and never displayed.
    if (!err || err.code !== "ENOENT") {
      throw err;
    }
  }

  return null;
}

/**
 * Writes a gzipped video file to the cache
 */
export async function writeToCache(fileName: string, fileData: Buffer) {
  const cacheDirectory = getCacheDirectory(true);
  if (!cacheDirectory) return;

  const cachedFilePath = path.resolve(cacheDirectory, `${fileName}.gz`);
  // gzip the file in an effort to save additional file size
  const compressedData = await gzip(fileData);

  await fsPromises.writeFile(cachedFilePath, compressedData);
}

/**
 * Takes an array of all files that were generated by the loader
 * and removes any dead files from the cache
 */
export async function cleanUpCache(builtCacheFilePaths: string[]) {
  const cacheDirectory = getCacheDirectory();
  if (!cacheDirectory) return;

  const allCachedFileNames = await fsPromises.readdir(cacheDirectory);

  await Promise.all(
    allCachedFileNames.map((cachedFileName) => {
      if (!builtCacheFilePaths.includes(cachedFileName.replace(".gz", ""))) {
        return fsPromises.unlink(path.resolve(cacheDirectory, cachedFileName));
      }
    })
  );
}
